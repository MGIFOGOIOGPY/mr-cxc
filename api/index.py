from flask import Flask, request, jsonify
import requests
import json
import random
from datetime import datetime

app = Flask(__name__)

# API Key for Gemini AI service
GEMINI_API_KEY = 'AIzaSyDiUWowljMDD3JcRw4vk5ZVnpVkqzuHOys'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'

def generate_visa_checker_tool(request_data):
    """Generate a Visa card checker tool from API request data"""
    # Generate colorful design elements
    colors = {
        'red': '\033[91m',
        'green': '\033[92m',
        'yellow': '\033[93m',
        'blue': '\033[94m',
        'magenta': '\033[95m',
        'cyan': '\033[96m',
        'white': '\033[97m',
        'end': '\033[0m'
    }
    
    # Get current date for file naming
    current_date = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    legal_disclaimer = f"""
    {colors['cyan']}#{'-'*78}#
    # {colors['magenta']}LEGAL DISCLAIMER:{colors['cyan']}
    # This tool is for educational and security testing purposes only.
    # Always ensure you have proper authorization before testing any payment systems.
    # Unauthorized testing of payment systems is illegal.
    # Generated by API Analysis Tool - Not affiliated with any payment processor.
    # {colors['yellow']}Design by Mr CNN{colors['cyan']}
    #{'-'*78}#{colors['end']}
    """
    
    prompt = f"""
    Create an advanced Python Visa card checker tool with the following requirements:
    
    1. The tool must be in English language only
    2. Include a beautiful colored console interface with large "Mr CNN" text in the header
    3. The tool must request a text file containing Visa cards in this exact format:
       4123122739323646|07|2028|939
       5360161724756716|10|2030|711
       4596226391664144|11|2029|788
    4. The file must have .txt extension
    5. Include Telegram contact @FFXXXA in the tool's documentation
    6. Each Visa card must be processed through the gateway's data regardless of gateway type
    7. The tool must provide response for each Visa and its status
    
    Technical requirements:
    1. Accept Visa card lists in format: CARD_NUMBER|MM|YYYY|CVV (one per line)
    2. Check each card's validity (Luhn check, expiration date)
    3. Test each card against payment gateways (simulate real transactions)
    4. Return color-coded results (green for valid, red for invalid)
    5. Include a professional console interface with colors and design
    6. Add 'by Mr CNN' in large colored text in the interface
    7. Include proper error handling and logging
    8. Output clean, production-ready Python code
    
    The tool must have:
    - Beautiful colored console interface with progress tracking
    - Statistics summary with colored output
    - Save results to file option (results_{current_date}.txt)
    - Multi-threading for faster checking
    - Clear documentation with Telegram contact @FFXXXA
    
    Return ONLY the Python code with no additional explanations or markdown formatting.
    Begin the code with this legal disclaimer:
    {legal_disclaimer}
    
    API Request Structure:
    {json.dumps(request_data, indent=2)}
    """
    
    headers = {
        'Content-Type': 'application/json',
        'X-goog-api-key': GEMINI_API_KEY,
    }
    
    json_data = {
        'contents': [
            {
                'parts': [
                    {
                        'text': prompt,
                    },
                ],
            },
        ],
    }
    
    response = requests.post(GEMINI_API_URL, headers=headers, json=json_data)
    
    if response.status_code == 200:
        result = response.json()
        try:
            generated_code = result['candidates'][0]['content']['parts'][0]['text']
            
            # Ensure all requirements are met in the generated code
            requirements_met = True
            requirements = [
                ("Mr CNN", "Large colored Mr CNN text not found"),
                ("@FFXXXA", "Telegram contact not found"),
                (".txt", "TXT file requirement not mentioned"),
                ("CARD_NUMBER|MM|YYYY|CVV", "Correct format not specified"),
                ("Luhn", "Luhn check not implemented"),
                ("multi-threading", "Multi-threading not implemented")
            ]
            
            for req, error_msg in requirements:
                if req.lower() not in generated_code.lower():
                    requirements_met = False
                    generated_code += f"\n# WARNING: {error_msg}"
            
            return generated_code
        except KeyError:
            return "# Error: Could not parse AI response"
    else:
        return f"# Error: AI service returned status code {response.status_code}"

@app.route('/api/generate-visa-checker', methods=['POST'])
def generate_visa_checker():
    """Endpoint to generate Visa checker tools"""
    if not request.is_json:
        return jsonify({'error': 'Request must be JSON format'}), 400
    
    request_data = request.get_json()
    
    # Validate required fields
    required_fields = ['headers', 'json_data', 'url']
    for field in required_fields:
        if field not in request_data:
            return jsonify({'error': f'Missing required field: {field}'}), 400
    
    # Generate the checking tool
    tool_code = generate_visa_checker_tool(request_data)
    
    # Add final notes
    response_data = {
        'status': 'success',
        'generated_tool': tool_code,
        'notes': [
            'Tool must request Visa cards in format: CARD_NUMBER|MM|YYYY|CVV',
            'Cards must be provided in a .txt file',
            'For support contact Telegram: @FFXXXA',
            'Design by Mr CNN',
            'This tool is for authorized testing purposes only'
        ]
    }
    
    return jsonify(response_data)

def luhn_check(card_number):
    """Helper function for Luhn check"""
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(card_number)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10 == 0

if __name__ == '__main__':
    app.run(debug=True, port=5000)
