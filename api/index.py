import os
import json
import requests
from flask import Flask, request, jsonify
from colorama import Fore, Style, init

init(autoreset=True)
app = Flask(__name__)

GEMINI_API_KEY = 'AIzaSyDiUWowljMDD3JcRw4vk5ZVnpVkqzuHOys'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

def generate_visa_tool_template():
    """Generate the complete Visa testing tool template using AI"""
    legal_notice = """
    # LEGAL NOTICE:
    # This tool is for educational purposes only.
    # Unauthorized use against payment systems is prohibited.
    # Generated by AI Security Tools - Developed by Mr CNN
    """
    
    ai_prompt = f"""
    Create a complete Python Visa card testing tool with these features:
    1. Accepts a text file containing Visa cards in format:
       5346360227396363|02|2028|121
       5346360227391323|02|2028|427
       5346360227392115|02|2028|470
       5346360227392560|02|2028|641
    
    2. Processes each Visa card through payment gateway simulation
    3. Displays beautiful colored JSON responses for each card
    4. Includes proper error handling and validation
    5. Shows "Developed by Mr CNN" in English after each response
    6. Has both command line and Flask API interfaces
    
    Return ONLY the Python code with no additional explanations.
    Start the code with this legal notice:
    {legal_notice}
    """
    
    headers = {
        'Content-Type': 'application/json',
        'x-goog-api-key': GEMINI_API_KEY
    }
    
    payload = {
        "contents": [{
            "parts": [{
                "text": ai_prompt
            }]
        }]
    }
    
    try:
        response = requests.post(GEMINI_API_URL, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            return response.json()['candidates'][0]['content']['parts'][0]['text']
        return f"Error: API returned status {response.status_code}"
    except Exception as e:
        return f"Error contacting AI: {str(e)}"

def process_visa_file(file_path):
    """Simulate processing Visa cards from file"""
    results = []
    try:
        with open(file_path, 'r') as f:
            for line in f:
                if line.strip():
                    card_data = line.strip().split('|')
                    if len(card_data) == 4:
                        result = {
                            "card_number": card_data[0],
                            "expiry": f"{card_data[1]}/{card_data[2]}",
                            "cvv": card_data[3],
                            "status": "valid" if len(card_data[0]) == 16 else "invalid",
                            "message": "Simulated successful verification"
                        }
                        results.append(result)
        return results
    except Exception as e:
        return [{"error": str(e)}]

def colorize_json(data):
    """Colorize JSON output for console"""
    json_str = json.dumps(data, indent=2)
    colored = []
    for line in json_str.split('\n'):
        if '"' in line:
            key, val = line.split(':', 1)
            colored.append(Fore.YELLOW + key + ':' + Fore.CYAN + val)
        else:
            colored.append(Fore.WHITE + line)
    return '\n'.join(colored)

@app.route('/generate-tool', methods=['GET'])
def generate_tool():
    """Endpoint to generate the Visa testing tool"""
    tool_code = generate_visa_tool_template()
    return jsonify({
        "status": "success",
        "generated_tool": tool_code,
        "developer": "Mr CNN"
    })

@app.route('/process-visas', methods=['POST'])
def process_visas():
    """Endpoint to process Visa cards"""
    if 'file' not in request.files:
        return jsonify({"error": "No file provided"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "Empty filename"}), 400
    
    try:
        temp_path = f"temp_{file.filename}"
        file.save(temp_path)
        results = process_visa_file(temp_path)
        os.remove(temp_path)
        
        formatted_results = []
        for result in results:
            formatted = {
                "data": result,
                "footer": "Developed by Mr CNN"
            }
            formatted_results.append(formatted)
        
        return jsonify({
            "status": "success",
            "cards_processed": len(results),
            "results": formatted_results
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def interactive_cli():
    """Command line interface for the tool"""
    print(Fore.GREEN + "Visa Card Processing Tool")
    print(Fore.BLUE + "Developed by Mr CNN\n")
    
    while True:
        print(Fore.YELLOW + "Options:")
        print("1. Generate Visa Testing Tool")
        print("2. Process Visa Cards File")
        print("3. Exit")
        
        choice = input(Fore.WHITE + "Select option: ").strip()
        
        if choice == '1':
            tool = generate_visa_tool_template()
            print(Fore.CYAN + "\nGenerated Tool Code:")
            print(tool)
        elif choice == '2':
            path = input("Enter Visa cards file path: ").strip()
            if os.path.exists(path):
                results = process_visa_file(path)
                print(Fore.GREEN + "\nProcessing Results:")
                for idx, res in enumerate(results, 1):
                    print(f"\nCard #{idx}:")
                    print(colorize_json(res))
                    print(Fore.MAGENTA + "Developed by Mr CNN")
            else:
                print(Fore.RED + "File not found!")
        elif choice == '3':
            break
        else:
            print(Fore.RED + "Invalid option!")
        print("\n")

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '--api':
        app.run(host='0.0.0.0', port=5000, debug=True)
    else:
        interactive_cli()
