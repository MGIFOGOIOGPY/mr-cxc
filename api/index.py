from flask import Flask, request, jsonify
import requests
import json
import random

app = Flask(__name__)

# API Key for Gemini AI service
GEMINI_API_KEY = 'AIzaSyDiUWowljMDD3JcRw4vk5ZVnpVkqzuHOys'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'

def generate_visa_checker_tool(request_data):
    """Generate a Visa card checker tool from API request data"""
    legal_disclaimer = """
    # LEGAL DISCLAIMER:
    # This tool is for educational and security testing purposes only.
    # Always ensure you have proper authorization before testing any payment systems.
    # Unauthorized testing of payment systems is illegal.
    # Generated by API Analysis Tool - Not affiliated with any payment processor.
    # Design by Mr CNN
    """
    
    prompt = f"""
    Create an advanced Python Visa card checker tool based on this API request structure.
    The tool should:
    1. Accept Visa card lists in format: 5154620020448872|06|2028|694 (one per line)
    2. Check each card's validity (Luhn check, expiration date)
    3. Test each card against payment gateways (simulate real transactions)
    4. Return color-coded results (green for valid, red for invalid)
    5. Include a professional console interface with colors and design
    6. Add 'by Mr CNN' in the interface design
    7. Include proper error handling and logging
    8. Output clean, production-ready Python code
    
    The tool must have:
    - Beautiful console interface with colors
    - Progress tracking
    - Statistics summary
    - Save results to file option
    - Multi-threading for faster checking
    
    Return ONLY the Python code with no additional explanations or markdown formatting.
    Begin the code with this legal disclaimer:
    {legal_disclaimer}
    
    API Request Structure:
    {json.dumps(request_data, indent=2)}
    """
    
    headers = {
        'Content-Type': 'application/json',
        'X-goog-api-key': GEMINI_API_KEY,
    }
    
    json_data = {
        'contents': [
            {
                'parts': [
                    {
                        'text': prompt,
                    },
                ],
            },
        ],
    }
    
    response = requests.post(GEMINI_API_URL, headers=headers, json=json_data)
    
    if response.status_code == 200:
        result = response.json()
        try:
            return result['candidates'][0]['content']['parts'][0]['text']
        except KeyError:
            return "# Error: Could not parse AI response"
    else:
        return f"# Error: AI service returned status code {response.status_code}"

@app.route('/api/generate-visa-checker', methods=['POST'])
def generate_visa_checker():
    """Endpoint to generate Visa checker tools"""
    if not request.is_json:
        return jsonify({'error': 'Request must be JSON format'}), 400
    
    request_data = request.get_json()
    
    # Validate required fields
    required_fields = ['headers', 'json_data', 'url']
    for field in required_fields:
        if field not in request_data:
            return jsonify({'error': f'Missing required field: {field}'}), 400
    
    # Generate the checking tool
    tool_code = generate_visa_checker_tool(request_data)
    
    return jsonify({
        'status': 'success',
        'generated_tool': tool_code,
        'disclaimer': 'This tool is for authorized testing purposes only. Design by Mr CNN'
    })

def luhn_check(card_number):
    """Helper function for Luhn check"""
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(card_number)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10 == 0

if __name__ == '__main__':
    app.run(debug=True, port=5000)
